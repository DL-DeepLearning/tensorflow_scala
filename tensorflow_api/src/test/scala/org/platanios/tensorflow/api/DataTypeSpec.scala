package org.platanios.tensorflow.api

import org.scalatest._

/**
  * @author Emmanouil Antonios Platanios
  */
class DataTypeSpec extends FlatSpec with Matchers {
  "'DataType.fromCValue'" must "work correctly when valid C values are provided" in {
    assert(DataType.fromCValue(1) === DataType.Float32)
    assert(DataType.fromCValue(2) === DataType.Float64)
    assert(DataType.fromCValue(3) === DataType.Int32)
    assert(DataType.fromCValue(4) === DataType.UInt8)
    assert(DataType.fromCValue(5) === DataType.Int16)
    assert(DataType.fromCValue(6) === DataType.Int8)
    assert(DataType.fromCValue(7) === DataType.String)
    assert(DataType.fromCValue(8) === DataType.Complex64)
    assert(DataType.fromCValue(9) === DataType.Int64)
    assert(DataType.fromCValue(10) === DataType.Boolean)
    assert(DataType.fromCValue(11) === DataType.QInt8)
    assert(DataType.fromCValue(12) === DataType.QUInt8)
    assert(DataType.fromCValue(13) === DataType.QInt32)
    assert(DataType.fromCValue(14) === DataType.BFloat16)
    assert(DataType.fromCValue(15) === DataType.QInt16)
    assert(DataType.fromCValue(16) === DataType.QUInt16)
    assert(DataType.fromCValue(17) === DataType.UInt16)
    assert(DataType.fromCValue(18) === DataType.Complex128)
    assert(DataType.fromCValue(19) === DataType.Float16)
    assert(DataType.fromCValue(20) === DataType.Resource)
    assert(DataType.fromCValue(101) === DataType.Float32Ref)
    assert(DataType.fromCValue(102) === DataType.Float64Ref)
    assert(DataType.fromCValue(103) === DataType.Int32Ref)
    assert(DataType.fromCValue(104) === DataType.UInt8Ref)
    assert(DataType.fromCValue(105) === DataType.Int16Ref)
    assert(DataType.fromCValue(106) === DataType.Int8Ref)
    assert(DataType.fromCValue(107) === DataType.StringRef)
    assert(DataType.fromCValue(108) === DataType.Complex64Ref)
    assert(DataType.fromCValue(109) === DataType.Int64Ref)
    assert(DataType.fromCValue(110) === DataType.BooleanRef)
    assert(DataType.fromCValue(111) === DataType.QInt8Ref)
    assert(DataType.fromCValue(112) === DataType.QUInt8Ref)
    assert(DataType.fromCValue(113) === DataType.QInt32Ref)
    assert(DataType.fromCValue(114) === DataType.BFloat16Ref)
    assert(DataType.fromCValue(115) === DataType.QInt16Ref)
    assert(DataType.fromCValue(116) === DataType.QUInt16Ref)
    assert(DataType.fromCValue(117) === DataType.UInt16Ref)
    assert(DataType.fromCValue(118) === DataType.Complex128Ref)
    assert(DataType.fromCValue(119) === DataType.Float16Ref)
    assert(DataType.fromCValue(120) === DataType.ResourceRef)
  }

  it must "throw an 'IllegalArgumentException' when invalid C values are provided" in {
    assertThrows[IllegalArgumentException](DataType.fromCValue(-10))
    assertThrows[IllegalArgumentException](DataType.fromCValue(-1))
    assertThrows[IllegalArgumentException](DataType.fromCValue(0))
    assertThrows[IllegalArgumentException](DataType.fromCValue(21))
    assertThrows[IllegalArgumentException](DataType.fromCValue(54))
    assertThrows[IllegalArgumentException](DataType.fromCValue(167))
  }

  "'DataType.fromName'" must "work correctly when valid data type names are provided" in {
    assert(DataType.fromName("Float32") === DataType.Float32)
    assert(DataType.fromName("Float64") === DataType.Float64)
    assert(DataType.fromName("Int32") === DataType.Int32)
    assert(DataType.fromName("UInt8") === DataType.UInt8)
    assert(DataType.fromName("Int16") === DataType.Int16)
    assert(DataType.fromName("Int8") === DataType.Int8)
    assert(DataType.fromName("String") === DataType.String)
    assert(DataType.fromName("Complex64") === DataType.Complex64)
    assert(DataType.fromName("Int64") === DataType.Int64)
    assert(DataType.fromName("Boolean") === DataType.Boolean)
    assert(DataType.fromName("QInt8") === DataType.QInt8)
    assert(DataType.fromName("QUInt8") === DataType.QUInt8)
    assert(DataType.fromName("QInt32") === DataType.QInt32)
    assert(DataType.fromName("BFloat16") === DataType.BFloat16)
    assert(DataType.fromName("QInt16") === DataType.QInt16)
    assert(DataType.fromName("QUInt16") === DataType.QUInt16)
    assert(DataType.fromName("UInt16") === DataType.UInt16)
    assert(DataType.fromName("Complex128") === DataType.Complex128)
    assert(DataType.fromName("Float16") === DataType.Float16)
    assert(DataType.fromName("Resource") === DataType.Resource)
    assert(DataType.fromName("Float32Ref") === DataType.Float32Ref)
    assert(DataType.fromName("Float64Ref") === DataType.Float64Ref)
    assert(DataType.fromName("Int32Ref") === DataType.Int32Ref)
    assert(DataType.fromName("UInt8Ref") === DataType.UInt8Ref)
    assert(DataType.fromName("Int16Ref") === DataType.Int16Ref)
    assert(DataType.fromName("Int8Ref") === DataType.Int8Ref)
    assert(DataType.fromName("StringRef") === DataType.StringRef)
    assert(DataType.fromName("Complex64Ref") === DataType.Complex64Ref)
    assert(DataType.fromName("Int64Ref") === DataType.Int64Ref)
    assert(DataType.fromName("BooleanRef") === DataType.BooleanRef)
    assert(DataType.fromName("QInt8Ref") === DataType.QInt8Ref)
    assert(DataType.fromName("QUInt8Ref") === DataType.QUInt8Ref)
    assert(DataType.fromName("QInt32Ref") === DataType.QInt32Ref)
    assert(DataType.fromName("BFloat16Ref") === DataType.BFloat16Ref)
    assert(DataType.fromName("QInt16Ref") === DataType.QInt16Ref)
    assert(DataType.fromName("QUInt16Ref") === DataType.QUInt16Ref)
    assert(DataType.fromName("UInt16Ref") === DataType.UInt16Ref)
    assert(DataType.fromName("Complex128Ref") === DataType.Complex128Ref)
    assert(DataType.fromName("Float16Ref") === DataType.Float16Ref)
    assert(DataType.fromName("ResourceRef") === DataType.ResourceRef)
  }

  it must "throw an 'IllegalArgumentException' when invalid data type names are provided" in {
    assertThrows[IllegalArgumentException](DataType.fromName("foo"))
    assertThrows[IllegalArgumentException](DataType.fromName("bar"))
    assertThrows[IllegalArgumentException](DataType.fromName(""))
    assertThrows[IllegalArgumentException](DataType.fromName(null))
  }

  "'DataType.dataTypeOf'" must "work correctly when valid values are provided" in {
    assert(DataType.dataTypeOf(1.0f) === DataType.Float32)
    assert(DataType.dataTypeOf(1.0) === DataType.Float64)
    assert(DataType.dataTypeOf(1) === DataType.Int32)
    assert(DataType.dataTypeOf(1L) === DataType.Int64)
    assert(DataType.dataTypeOf(true) === DataType.Boolean)
    assert(DataType.dataTypeOf(Array[Byte](1, 2, 3)) === DataType.String)
    assert(DataType.dataTypeOf(Array(1.0f, 2.0f)) === DataType.Float32)
    assert(DataType.dataTypeOf(Array(1.0, 2.0)) === DataType.Float64)
    assert(DataType.dataTypeOf(Array(1, 2)) === DataType.Int32)
    assert(DataType.dataTypeOf(Array(1L, 2L)) === DataType.Int64)
    assert(DataType.dataTypeOf(Array(true, false)) === DataType.Boolean)
    assert(DataType.dataTypeOf(Array(Array[Byte](1, 2, 3), Array[Byte](4, 5, 6))) === DataType.String)
    assert(DataType.dataTypeOf(Array(Array(1.0f, 2.0f), Array(3.0f, 4.0f))) === DataType.Float32)
    assert(DataType.dataTypeOf(Array(Array(1.0, 2.0), Array(3.0, 4.0))) === DataType.Float64)
    assert(DataType.dataTypeOf(Array(Array(1, 2), Array(3, 4))) === DataType.Int32)
    assert(DataType.dataTypeOf(Array(Array(1L, 2L), Array(3L, 4L))) === DataType.Int64)
    assert(DataType.dataTypeOf(Array(Array(true, false), Array(false, true))) === DataType.Boolean)
  }

  it must "throw an 'IllegalArgumentException' when invalid values are provided" in {
    assertThrows[IllegalArgumentException](DataType.dataTypeOf("foo")) // TODO: Support strings?
    assertThrows[IllegalArgumentException](DataType.dataTypeOf((5.0, -1)))
  }

  "'DataType.size'" must "give the correct result" in {
    assert(DataType.Float16.byteSize === 2)
    assert(DataType.Float32.byteSize === 4)
    assert(DataType.Float64.byteSize === 8)
    assert(DataType.BFloat16.byteSize === 2)
    assert(DataType.Complex64.byteSize === 8)
    assert(DataType.Complex128.byteSize === 16)
    assert(DataType.Int8.byteSize === 1)
    assert(DataType.Int16.byteSize === 2)
    assert(DataType.Int32.byteSize === 4)
    assert(DataType.Int64.byteSize === 8)
    assert(DataType.UInt8.byteSize === 1)
    assert(DataType.UInt16.byteSize === 2)
    assert(DataType.QInt8.byteSize === 1)
    assert(DataType.QInt16.byteSize === 2)
    assert(DataType.QInt32.byteSize === 4)
    assert(DataType.QUInt8.byteSize === 1)
    assert(DataType.QUInt16.byteSize === 2)
    assert(DataType.Boolean.byteSize === 1)
    assert(DataType.String.byteSize === -1)
    assert(DataType.Resource.byteSize === 1)
    assert(DataType.Float16Ref.byteSize === 2)
    assert(DataType.Float32Ref.byteSize === 4)
    assert(DataType.Float64Ref.byteSize === 8)
    assert(DataType.BFloat16Ref.byteSize === 2)
    assert(DataType.Complex64Ref.byteSize === 8)
    assert(DataType.Complex128Ref.byteSize === 16)
    assert(DataType.Int8Ref.byteSize === 1)
    assert(DataType.Int16Ref.byteSize === 2)
    assert(DataType.Int32Ref.byteSize === 4)
    assert(DataType.Int64Ref.byteSize === 8)
    assert(DataType.UInt8Ref.byteSize === 1)
    assert(DataType.UInt16Ref.byteSize === 2)
    assert(DataType.QInt8Ref.byteSize === 1)
    assert(DataType.QInt16Ref.byteSize === 2)
    assert(DataType.QInt32Ref.byteSize === 4)
    assert(DataType.QUInt8Ref.byteSize === 1)
    assert(DataType.QUInt16Ref.byteSize === 2)
    assert(DataType.BooleanRef.byteSize === 1)
    assert(DataType.StringRef.byteSize === -1)
    assert(DataType.ResourceRef.byteSize === 1)
  }

  "'DataType.isBoolean'" must "always work correctly" in {
    assert(DataType.Float16.isBoolean === false)
    assert(DataType.Float32.isBoolean === false)
    assert(DataType.Float64.isBoolean === false)
    assert(DataType.BFloat16.isBoolean === false)
    assert(DataType.Complex64.isBoolean === false)
    assert(DataType.Complex128.isBoolean === false)
    assert(DataType.Int8.isBoolean === false)
    assert(DataType.Int16.isBoolean === false)
    assert(DataType.Int32.isBoolean === false)
    assert(DataType.Int64.isBoolean === false)
    assert(DataType.UInt8.isBoolean === false)
    assert(DataType.UInt16.isBoolean === false)
    assert(DataType.QInt8.isBoolean === false)
    assert(DataType.QInt16.isBoolean === false)
    assert(DataType.QInt32.isBoolean === false)
    assert(DataType.QUInt8.isBoolean === false)
    assert(DataType.QUInt16.isBoolean === false)
    assert(DataType.Boolean.isBoolean === true)
    assert(DataType.String.isBoolean === false)
    assert(DataType.Resource.isBoolean === false)
    assert(DataType.Float16Ref.isBoolean === false)
    assert(DataType.Float32Ref.isBoolean === false)
    assert(DataType.Float64Ref.isBoolean === false)
    assert(DataType.BFloat16Ref.isBoolean === false)
    assert(DataType.Complex64Ref.isBoolean === false)
    assert(DataType.Complex128Ref.isBoolean === false)
    assert(DataType.Int8Ref.isBoolean === false)
    assert(DataType.Int16Ref.isBoolean === false)
    assert(DataType.Int32Ref.isBoolean === false)
    assert(DataType.Int64Ref.isBoolean === false)
    assert(DataType.UInt8Ref.isBoolean === false)
    assert(DataType.UInt16Ref.isBoolean === false)
    assert(DataType.QInt8Ref.isBoolean === false)
    assert(DataType.QInt16Ref.isBoolean === false)
    assert(DataType.QInt32Ref.isBoolean === false)
    assert(DataType.QUInt8Ref.isBoolean === false)
    assert(DataType.QUInt16Ref.isBoolean === false)
    assert(DataType.BooleanRef.isBoolean === true)
    assert(DataType.StringRef.isBoolean === false)
    assert(DataType.ResourceRef.isBoolean === false)
  }

  "'DataType.isFloatingPoint'" must "always work correctly" in {
    assert(DataType.Float16.isFloatingPoint === true)
    assert(DataType.Float32.isFloatingPoint === true)
    assert(DataType.Float64.isFloatingPoint === true)
    assert(DataType.BFloat16.isFloatingPoint === false)
    assert(DataType.Complex64.isFloatingPoint === false)
    assert(DataType.Complex128.isFloatingPoint === false)
    assert(DataType.Int8.isFloatingPoint === false)
    assert(DataType.Int16.isFloatingPoint === false)
    assert(DataType.Int32.isFloatingPoint === false)
    assert(DataType.Int64.isFloatingPoint === false)
    assert(DataType.UInt8.isFloatingPoint === false)
    assert(DataType.UInt16.isFloatingPoint === false)
    assert(DataType.QInt8.isFloatingPoint === false)
    assert(DataType.QInt16.isFloatingPoint === false)
    assert(DataType.QInt32.isFloatingPoint === false)
    assert(DataType.QUInt8.isFloatingPoint === false)
    assert(DataType.QUInt16.isFloatingPoint === false)
    assert(DataType.Boolean.isFloatingPoint === false)
    assert(DataType.String.isFloatingPoint === false)
    assert(DataType.Resource.isFloatingPoint === false)
    assert(DataType.Float16Ref.isFloatingPoint === true)
    assert(DataType.Float32Ref.isFloatingPoint === true)
    assert(DataType.Float64Ref.isFloatingPoint === true)
    assert(DataType.BFloat16Ref.isFloatingPoint === false)
    assert(DataType.Complex64Ref.isFloatingPoint === false)
    assert(DataType.Complex128Ref.isFloatingPoint === false)
    assert(DataType.Int8Ref.isFloatingPoint === false)
    assert(DataType.Int16Ref.isFloatingPoint === false)
    assert(DataType.Int32Ref.isFloatingPoint === false)
    assert(DataType.Int64Ref.isFloatingPoint === false)
    assert(DataType.UInt8Ref.isFloatingPoint === false)
    assert(DataType.UInt16Ref.isFloatingPoint === false)
    assert(DataType.QInt8Ref.isFloatingPoint === false)
    assert(DataType.QInt16Ref.isFloatingPoint === false)
    assert(DataType.QInt32Ref.isFloatingPoint === false)
    assert(DataType.QUInt8Ref.isFloatingPoint === false)
    assert(DataType.QUInt16Ref.isFloatingPoint === false)
    assert(DataType.BooleanRef.isFloatingPoint === false)
    assert(DataType.StringRef.isFloatingPoint === false)
    assert(DataType.ResourceRef.isFloatingPoint === false)
  }

  "'DataType.isInteger'" must "always work correctly" in {
    assert(DataType.Float16.isInteger === false)
    assert(DataType.Float32.isInteger === false)
    assert(DataType.Float64.isInteger === false)
    assert(DataType.BFloat16.isInteger === false)
    assert(DataType.Complex64.isInteger === false)
    assert(DataType.Complex128.isInteger === false)
    assert(DataType.Int8.isInteger === true)
    assert(DataType.Int16.isInteger === true)
    assert(DataType.Int32.isInteger === true)
    assert(DataType.Int64.isInteger === true)
    assert(DataType.UInt8.isInteger === true)
    assert(DataType.UInt16.isInteger === true)
    assert(DataType.QInt8.isInteger === false)
    assert(DataType.QInt16.isInteger === false)
    assert(DataType.QInt32.isInteger === false)
    assert(DataType.QUInt8.isInteger === false)
    assert(DataType.QUInt16.isInteger === false)
    assert(DataType.Boolean.isInteger === false)
    assert(DataType.String.isInteger === false)
    assert(DataType.Resource.isInteger === false)
    assert(DataType.Float16Ref.isInteger === false)
    assert(DataType.Float32Ref.isInteger === false)
    assert(DataType.Float64Ref.isInteger === false)
    assert(DataType.BFloat16Ref.isInteger === false)
    assert(DataType.Complex64Ref.isInteger === false)
    assert(DataType.Complex128Ref.isInteger === false)
    assert(DataType.Int8Ref.isInteger === true)
    assert(DataType.Int16Ref.isInteger === true)
    assert(DataType.Int32Ref.isInteger === true)
    assert(DataType.Int64Ref.isInteger === true)
    assert(DataType.UInt8Ref.isInteger === true)
    assert(DataType.UInt16Ref.isInteger === true)
    assert(DataType.QInt8Ref.isInteger === false)
    assert(DataType.QInt16Ref.isInteger === false)
    assert(DataType.QInt32Ref.isInteger === false)
    assert(DataType.QUInt8Ref.isInteger === false)
    assert(DataType.QUInt16Ref.isInteger === false)
    assert(DataType.BooleanRef.isInteger === false)
    assert(DataType.StringRef.isInteger === false)
    assert(DataType.ResourceRef.isInteger === false)
  }

  "'DataType.isComplex'" must "always work correctly" in {
    assert(DataType.Float16.isComplex === false)
    assert(DataType.Float32.isComplex === false)
    assert(DataType.Float64.isComplex === false)
    assert(DataType.BFloat16.isComplex === false)
    assert(DataType.Complex64.isComplex === true)
    assert(DataType.Complex128.isComplex === true)
    assert(DataType.Int8.isComplex === false)
    assert(DataType.Int16.isComplex === false)
    assert(DataType.Int32.isComplex === false)
    assert(DataType.Int64.isComplex === false)
    assert(DataType.UInt8.isComplex === false)
    assert(DataType.UInt16.isComplex === false)
    assert(DataType.QInt8.isComplex === false)
    assert(DataType.QInt16.isComplex === false)
    assert(DataType.QInt32.isComplex === false)
    assert(DataType.QUInt8.isComplex === false)
    assert(DataType.QUInt16.isComplex === false)
    assert(DataType.Boolean.isComplex === false)
    assert(DataType.String.isComplex === false)
    assert(DataType.Resource.isComplex === false)
    assert(DataType.Float16Ref.isComplex === false)
    assert(DataType.Float32Ref.isComplex === false)
    assert(DataType.Float64Ref.isComplex === false)
    assert(DataType.BFloat16Ref.isComplex === false)
    assert(DataType.Complex64Ref.isComplex === true)
    assert(DataType.Complex128Ref.isComplex === true)
    assert(DataType.Int8Ref.isComplex === false)
    assert(DataType.Int16Ref.isComplex === false)
    assert(DataType.Int32Ref.isComplex === false)
    assert(DataType.Int64Ref.isComplex === false)
    assert(DataType.UInt8Ref.isComplex === false)
    assert(DataType.UInt16Ref.isComplex === false)
    assert(DataType.QInt8Ref.isComplex === false)
    assert(DataType.QInt16Ref.isComplex === false)
    assert(DataType.QInt32Ref.isComplex === false)
    assert(DataType.QUInt8Ref.isComplex === false)
    assert(DataType.QUInt16Ref.isComplex === false)
    assert(DataType.BooleanRef.isComplex === false)
    assert(DataType.StringRef.isComplex === false)
    assert(DataType.ResourceRef.isComplex === false)
  }

  "'DataType.isQuantized'" must "always work correctly" in {
    assert(DataType.Float16.isQuantized === false)
    assert(DataType.Float32.isQuantized === false)
    assert(DataType.Float64.isQuantized === false)
    assert(DataType.BFloat16.isQuantized === true)
    assert(DataType.Complex64.isQuantized === false)
    assert(DataType.Complex128.isQuantized === false)
    assert(DataType.Int8.isQuantized === false)
    assert(DataType.Int16.isQuantized === false)
    assert(DataType.Int32.isQuantized === false)
    assert(DataType.Int64.isQuantized === false)
    assert(DataType.UInt8.isQuantized === false)
    assert(DataType.UInt16.isQuantized === false)
    assert(DataType.QInt8.isQuantized === true)
    assert(DataType.QInt16.isQuantized === true)
    assert(DataType.QInt32.isQuantized === true)
    assert(DataType.QUInt8.isQuantized === true)
    assert(DataType.QUInt16.isQuantized === true)
    assert(DataType.Boolean.isQuantized === false)
    assert(DataType.String.isQuantized === false)
    assert(DataType.Resource.isQuantized === false)
    assert(DataType.Float16Ref.isQuantized === false)
    assert(DataType.Float32Ref.isQuantized === false)
    assert(DataType.Float64Ref.isQuantized === false)
    assert(DataType.BFloat16Ref.isQuantized === true)
    assert(DataType.Complex64Ref.isQuantized === false)
    assert(DataType.Complex128Ref.isQuantized === false)
    assert(DataType.Int8Ref.isQuantized === false)
    assert(DataType.Int16Ref.isQuantized === false)
    assert(DataType.Int32Ref.isQuantized === false)
    assert(DataType.Int64Ref.isQuantized === false)
    assert(DataType.UInt8Ref.isQuantized === false)
    assert(DataType.UInt16Ref.isQuantized === false)
    assert(DataType.QInt8Ref.isQuantized === true)
    assert(DataType.QInt16Ref.isQuantized === true)
    assert(DataType.QInt32Ref.isQuantized === true)
    assert(DataType.QUInt8Ref.isQuantized === true)
    assert(DataType.QUInt16Ref.isQuantized === true)
    assert(DataType.BooleanRef.isQuantized === false)
    assert(DataType.StringRef.isQuantized === false)
    assert(DataType.ResourceRef.isQuantized === false)
  }

  "'DataType.isUnsigned'" must "always work correctly" in {
    assert(DataType.Float16.isUnsigned === false)
    assert(DataType.Float32.isUnsigned === false)
    assert(DataType.Float64.isUnsigned === false)
    assert(DataType.BFloat16.isUnsigned === false)
    assert(DataType.Complex64.isUnsigned === false)
    assert(DataType.Complex128.isUnsigned === false)
    assert(DataType.Int8.isUnsigned === false)
    assert(DataType.Int16.isUnsigned === false)
    assert(DataType.Int32.isUnsigned === false)
    assert(DataType.Int64.isUnsigned === false)
    assert(DataType.UInt8.isUnsigned === true)
    assert(DataType.UInt16.isUnsigned === true)
    assert(DataType.QInt8.isUnsigned === false)
    assert(DataType.QInt16.isUnsigned === false)
    assert(DataType.QInt32.isUnsigned === false)
    assert(DataType.QUInt8.isUnsigned === false)
    assert(DataType.QUInt16.isUnsigned === false)
    assert(DataType.Boolean.isUnsigned === false)
    assert(DataType.String.isUnsigned === false)
    assert(DataType.Resource.isUnsigned === false)
    assert(DataType.Float16Ref.isUnsigned === false)
    assert(DataType.Float32Ref.isUnsigned === false)
    assert(DataType.Float64Ref.isUnsigned === false)
    assert(DataType.BFloat16Ref.isUnsigned === false)
    assert(DataType.Complex64Ref.isUnsigned === false)
    assert(DataType.Complex128Ref.isUnsigned === false)
    assert(DataType.Int8Ref.isUnsigned === false)
    assert(DataType.Int16Ref.isUnsigned === false)
    assert(DataType.Int32Ref.isUnsigned === false)
    assert(DataType.Int64Ref.isUnsigned === false)
    assert(DataType.UInt8Ref.isUnsigned === true)
    assert(DataType.UInt16Ref.isUnsigned === true)
    assert(DataType.QInt8Ref.isUnsigned === false)
    assert(DataType.QInt16Ref.isUnsigned === false)
    assert(DataType.QInt32Ref.isUnsigned === false)
    assert(DataType.QUInt8Ref.isUnsigned === false)
    assert(DataType.QUInt16Ref.isUnsigned === false)
    assert(DataType.BooleanRef.isUnsigned === false)
    assert(DataType.StringRef.isUnsigned === false)
    assert(DataType.ResourceRef.isUnsigned === false)
  }

  "'DataType.isCompatibleWith'" must "always work correctly" in {
    assert(DataType.Float16.isCompatibleWith(DataType.Float16))
    assert(DataType.Float16.isCompatibleWith(DataType.Float16Ref))
    assert(!DataType.Float16Ref.isCompatibleWith(DataType.Float16))
    assert(DataType.Float16Ref.isCompatibleWith(DataType.Float16Ref))
    assert(!DataType.Float16.isCompatibleWith(DataType.Float32))
    assert(!DataType.Float16.isCompatibleWith(DataType.Float32Ref))
    assert(!DataType.Float16Ref.isCompatibleWith(DataType.Float32))
    assert(!DataType.Float16Ref.isCompatibleWith(DataType.Float32Ref))
  }

  "'DataType.isRef'" must "always work correctly" in {
    assert(DataType.Float16.isRef === false)
    assert(DataType.Float32.isRef === false)
    assert(DataType.Float64.isRef === false)
    assert(DataType.BFloat16.isRef === false)
    assert(DataType.Complex64.isRef === false)
    assert(DataType.Complex128.isRef === false)
    assert(DataType.Int8.isRef === false)
    assert(DataType.Int16.isRef === false)
    assert(DataType.Int32.isRef === false)
    assert(DataType.Int64.isRef === false)
    assert(DataType.UInt8.isRef === false)
    assert(DataType.UInt16.isRef === false)
    assert(DataType.QInt8.isRef === false)
    assert(DataType.QInt16.isRef === false)
    assert(DataType.QInt32.isRef === false)
    assert(DataType.QUInt8.isRef === false)
    assert(DataType.QUInt16.isRef === false)
    assert(DataType.Boolean.isRef === false)
    assert(DataType.String.isRef === false)
    assert(DataType.Resource.isRef === false)
    assert(DataType.Float16Ref.isRef === true)
    assert(DataType.Float32Ref.isRef === true)
    assert(DataType.Float64Ref.isRef === true)
    assert(DataType.BFloat16Ref.isRef === true)
    assert(DataType.Complex64Ref.isRef === true)
    assert(DataType.Complex128Ref.isRef === true)
    assert(DataType.Int8Ref.isRef === true)
    assert(DataType.Int16Ref.isRef === true)
    assert(DataType.Int32Ref.isRef === true)
    assert(DataType.Int64Ref.isRef === true)
    assert(DataType.UInt8Ref.isRef === true)
    assert(DataType.UInt16Ref.isRef === true)
    assert(DataType.QInt8Ref.isRef === true)
    assert(DataType.QInt16Ref.isRef === true)
    assert(DataType.QInt32Ref.isRef === true)
    assert(DataType.QUInt8Ref.isRef === true)
    assert(DataType.QUInt16Ref.isRef === true)
    assert(DataType.BooleanRef.isRef === true)
    assert(DataType.StringRef.isRef === true)
    assert(DataType.ResourceRef.isRef === true)
  }

  "'DataType.ref'" must "always work correctly" in {
    assert(DataType.Float16.ref === DataType.Float16Ref)
    assert(DataType.Float32.ref === DataType.Float32Ref)
    assert(DataType.Float64.ref === DataType.Float64Ref)
    assert(DataType.BFloat16.ref === DataType.BFloat16Ref)
    assert(DataType.Complex64.ref === DataType.Complex64Ref)
    assert(DataType.Complex128.ref === DataType.Complex128Ref)
    assert(DataType.Int8.ref === DataType.Int8Ref)
    assert(DataType.Int16.ref === DataType.Int16Ref)
    assert(DataType.Int32.ref === DataType.Int32Ref)
    assert(DataType.Int64.ref === DataType.Int64Ref)
    assert(DataType.UInt8.ref === DataType.UInt8Ref)
    assert(DataType.UInt16.ref === DataType.UInt16Ref)
    assert(DataType.QInt8.ref === DataType.QInt8Ref)
    assert(DataType.QInt16.ref === DataType.QInt16Ref)
    assert(DataType.QInt32.ref === DataType.QInt32Ref)
    assert(DataType.QUInt8.ref === DataType.QUInt8Ref)
    assert(DataType.QUInt16.ref === DataType.QUInt16Ref)
    assert(DataType.Boolean.ref === DataType.BooleanRef)
    assert(DataType.String.ref === DataType.StringRef)
    assert(DataType.Resource.ref === DataType.ResourceRef)
    assert(DataType.Float16Ref.ref === DataType.Float16Ref)
    assert(DataType.Float32Ref.ref === DataType.Float32Ref)
    assert(DataType.Float64Ref.ref === DataType.Float64Ref)
    assert(DataType.BFloat16Ref.ref === DataType.BFloat16Ref)
    assert(DataType.Complex64Ref.ref === DataType.Complex64Ref)
    assert(DataType.Complex128Ref.ref === DataType.Complex128Ref)
    assert(DataType.Int8Ref.ref === DataType.Int8Ref)
    assert(DataType.Int16Ref.ref === DataType.Int16Ref)
    assert(DataType.Int32Ref.ref === DataType.Int32Ref)
    assert(DataType.Int64Ref.ref === DataType.Int64Ref)
    assert(DataType.UInt8Ref.ref === DataType.UInt8Ref)
    assert(DataType.UInt16Ref.ref === DataType.UInt16Ref)
    assert(DataType.QInt8Ref.ref === DataType.QInt8Ref)
    assert(DataType.QInt16Ref.ref === DataType.QInt16Ref)
    assert(DataType.QInt32Ref.ref === DataType.QInt32Ref)
    assert(DataType.QUInt8Ref.ref === DataType.QUInt8Ref)
    assert(DataType.QUInt16Ref.ref === DataType.QUInt16Ref)
    assert(DataType.BooleanRef.ref === DataType.BooleanRef)
    assert(DataType.StringRef.ref === DataType.StringRef)
    assert(DataType.ResourceRef.ref === DataType.ResourceRef)
  }

  "'DataType.base'" must "always work correctly" in {
    assert(DataType.Float16.base === DataType.Float16)
    assert(DataType.Float32.base === DataType.Float32)
    assert(DataType.Float64.base === DataType.Float64)
    assert(DataType.BFloat16.base === DataType.BFloat16)
    assert(DataType.Complex64.base === DataType.Complex64)
    assert(DataType.Complex128.base === DataType.Complex128)
    assert(DataType.Int8.base === DataType.Int8)
    assert(DataType.Int16.base === DataType.Int16)
    assert(DataType.Int32.base === DataType.Int32)
    assert(DataType.Int64.base === DataType.Int64)
    assert(DataType.UInt8.base === DataType.UInt8)
    assert(DataType.UInt16.base === DataType.UInt16)
    assert(DataType.QInt8.base === DataType.QInt8)
    assert(DataType.QInt16.base === DataType.QInt16)
    assert(DataType.QInt32.base === DataType.QInt32)
    assert(DataType.QUInt8.base === DataType.QUInt8)
    assert(DataType.QUInt16.base === DataType.QUInt16)
    assert(DataType.Boolean.base === DataType.Boolean)
    assert(DataType.String.base === DataType.String)
    assert(DataType.Resource.base === DataType.Resource)
    assert(DataType.Float16Ref.base === DataType.Float16)
    assert(DataType.Float32Ref.base === DataType.Float32)
    assert(DataType.Float64Ref.base === DataType.Float64)
    assert(DataType.BFloat16Ref.base === DataType.BFloat16)
    assert(DataType.Complex64Ref.base === DataType.Complex64)
    assert(DataType.Complex128Ref.base === DataType.Complex128)
    assert(DataType.Int8Ref.base === DataType.Int8)
    assert(DataType.Int16Ref.base === DataType.Int16)
    assert(DataType.Int32Ref.base === DataType.Int32)
    assert(DataType.Int64Ref.base === DataType.Int64)
    assert(DataType.UInt8Ref.base === DataType.UInt8)
    assert(DataType.UInt16Ref.base === DataType.UInt16)
    assert(DataType.QInt8Ref.base === DataType.QInt8)
    assert(DataType.QInt16Ref.base === DataType.QInt16)
    assert(DataType.QInt32Ref.base === DataType.QInt32)
    assert(DataType.QUInt8Ref.base === DataType.QUInt8)
    assert(DataType.QUInt16Ref.base === DataType.QUInt16)
    assert(DataType.BooleanRef.base === DataType.Boolean)
    assert(DataType.StringRef.base === DataType.String)
    assert(DataType.ResourceRef.base === DataType.Resource)
  }

  "'DataType.real'" must "always work correctly" in {
    assert(DataType.Float16.real === DataType.Float16)
    assert(DataType.Float32.real === DataType.Float32)
    assert(DataType.Float64.real === DataType.Float64)
    assert(DataType.BFloat16.real === DataType.BFloat16)
    assert(DataType.Complex64.real === DataType.Float32)
    assert(DataType.Complex128.real === DataType.Float64)
    assert(DataType.Int8.real === DataType.Int8)
    assert(DataType.Int16.real === DataType.Int16)
    assert(DataType.Int32.real === DataType.Int32)
    assert(DataType.Int64.real === DataType.Int64)
    assert(DataType.UInt8.real === DataType.UInt8)
    assert(DataType.UInt16.real === DataType.UInt16)
    assert(DataType.QInt8.real === DataType.QInt8)
    assert(DataType.QInt16.real === DataType.QInt16)
    assert(DataType.QInt32.real === DataType.QInt32)
    assert(DataType.QUInt8.real === DataType.QUInt8)
    assert(DataType.QUInt16.real === DataType.QUInt16)
    assert(DataType.Boolean.real === DataType.Boolean)
    assert(DataType.String.real === DataType.String)
    assert(DataType.Resource.real === DataType.Resource)
    assert(DataType.Float16Ref.real === DataType.Float16Ref)
    assert(DataType.Float32Ref.real === DataType.Float32Ref)
    assert(DataType.Float64Ref.real === DataType.Float64Ref)
    assert(DataType.BFloat16Ref.real === DataType.BFloat16Ref)
    assert(DataType.Complex64Ref.real === DataType.Float32Ref)
    assert(DataType.Complex128Ref.real === DataType.Float64Ref)
    assert(DataType.Int8Ref.real === DataType.Int8Ref)
    assert(DataType.Int16Ref.real === DataType.Int16Ref)
    assert(DataType.Int32Ref.real === DataType.Int32Ref)
    assert(DataType.Int64Ref.real === DataType.Int64Ref)
    assert(DataType.UInt8Ref.real === DataType.UInt8Ref)
    assert(DataType.UInt16Ref.real === DataType.UInt16Ref)
    assert(DataType.QInt8Ref.real === DataType.QInt8Ref)
    assert(DataType.QInt16Ref.real === DataType.QInt16Ref)
    assert(DataType.QInt32Ref.real === DataType.QInt32Ref)
    assert(DataType.QUInt8Ref.real === DataType.QUInt8Ref)
    assert(DataType.QUInt16Ref.real === DataType.QUInt16Ref)
    assert(DataType.BooleanRef.real === DataType.BooleanRef)
    assert(DataType.StringRef.real === DataType.StringRef)
    assert(DataType.ResourceRef.real === DataType.ResourceRef)
  }

  // TODO: Add tests for 'DataType.cast', 'DataType.putElementInBuffer', and 'DataType.getElementFromBuffer'.
}
