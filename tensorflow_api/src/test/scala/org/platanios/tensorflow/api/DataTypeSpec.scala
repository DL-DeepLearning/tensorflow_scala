package org.platanios.tensorflow.api

import org.scalatest._

/**
  * @author Emmanouil Antonios Platanios
  */
class DataTypeSpec extends FlatSpec with Matchers {
  "'DataType.fromCValue'" must "work correctly when valid C values are provided" in {
    assert(DataType.fromCValue(1) === DataType.float32)
    assert(DataType.fromCValue(2) === DataType.float64)
    assert(DataType.fromCValue(3) === DataType.int32)
    assert(DataType.fromCValue(4) === DataType.uint8)
    assert(DataType.fromCValue(5) === DataType.int16)
    assert(DataType.fromCValue(6) === DataType.int8)
    assert(DataType.fromCValue(7) === DataType.string)
    assert(DataType.fromCValue(8) === DataType.complex64)
    assert(DataType.fromCValue(9) === DataType.int64)
    assert(DataType.fromCValue(10) === DataType.boolean)
    assert(DataType.fromCValue(11) === DataType.qint8)
    assert(DataType.fromCValue(12) === DataType.quint8)
    assert(DataType.fromCValue(13) === DataType.qint32)
    assert(DataType.fromCValue(14) === DataType.bfloat16)
    assert(DataType.fromCValue(15) === DataType.qint16)
    assert(DataType.fromCValue(16) === DataType.quint16)
    assert(DataType.fromCValue(17) === DataType.uint16)
    assert(DataType.fromCValue(18) === DataType.complex128)
    assert(DataType.fromCValue(19) === DataType.float16)
    assert(DataType.fromCValue(20) === DataType.resource)
    assert(DataType.fromCValue(101) === DataType.float32Ref)
    assert(DataType.fromCValue(102) === DataType.float64Ref)
    assert(DataType.fromCValue(103) === DataType.int32Ref)
    assert(DataType.fromCValue(104) === DataType.uint8Ref)
    assert(DataType.fromCValue(105) === DataType.int16Ref)
    assert(DataType.fromCValue(106) === DataType.int8Ref)
    assert(DataType.fromCValue(107) === DataType.stringRef)
    assert(DataType.fromCValue(108) === DataType.complex64Ref)
    assert(DataType.fromCValue(109) === DataType.int64Ref)
    assert(DataType.fromCValue(110) === DataType.booleanRef)
    assert(DataType.fromCValue(111) === DataType.qint8Ref)
    assert(DataType.fromCValue(112) === DataType.quint8Ref)
    assert(DataType.fromCValue(113) === DataType.qint32Ref)
    assert(DataType.fromCValue(114) === DataType.bfloat16Ref)
    assert(DataType.fromCValue(115) === DataType.qint16Ref)
    assert(DataType.fromCValue(116) === DataType.quint16Ref)
    assert(DataType.fromCValue(117) === DataType.uint16Ref)
    assert(DataType.fromCValue(118) === DataType.complex128Ref)
    assert(DataType.fromCValue(119) === DataType.float16Ref)
    assert(DataType.fromCValue(120) === DataType.resourceRef)
  }

  it must "throw an 'IllegalArgumentException' when invalid C values are provided" in {
    assertThrows[IllegalArgumentException](DataType.fromCValue(-10))
    assertThrows[IllegalArgumentException](DataType.fromCValue(-1))
    assertThrows[IllegalArgumentException](DataType.fromCValue(0))
    assertThrows[IllegalArgumentException](DataType.fromCValue(21))
    assertThrows[IllegalArgumentException](DataType.fromCValue(54))
    assertThrows[IllegalArgumentException](DataType.fromCValue(167))
  }

  "'DataType.fromName'" must "work correctly when valid data type names are provided" in {
    assert(DataType.fromName("float32") === DataType.float32)
    assert(DataType.fromName("float64") === DataType.float64)
    assert(DataType.fromName("int32") === DataType.int32)
    assert(DataType.fromName("uint8") === DataType.uint8)
    assert(DataType.fromName("int16") === DataType.int16)
    assert(DataType.fromName("int8") === DataType.int8)
    assert(DataType.fromName("string") === DataType.string)
    assert(DataType.fromName("complex64") === DataType.complex64)
    assert(DataType.fromName("int64") === DataType.int64)
    assert(DataType.fromName("boolean") === DataType.boolean)
    assert(DataType.fromName("qint8") === DataType.qint8)
    assert(DataType.fromName("quint8") === DataType.quint8)
    assert(DataType.fromName("qint32") === DataType.qint32)
    assert(DataType.fromName("bfloat16") === DataType.bfloat16)
    assert(DataType.fromName("qint16") === DataType.qint16)
    assert(DataType.fromName("quint16") === DataType.quint16)
    assert(DataType.fromName("uint16") === DataType.uint16)
    assert(DataType.fromName("complex128") === DataType.complex128)
    assert(DataType.fromName("float16") === DataType.float16)
    assert(DataType.fromName("resource") === DataType.resource)
    assert(DataType.fromName("float32_ref") === DataType.float32Ref)
    assert(DataType.fromName("float64_ref") === DataType.float64Ref)
    assert(DataType.fromName("int32_ref") === DataType.int32Ref)
    assert(DataType.fromName("uint8_ref") === DataType.uint8Ref)
    assert(DataType.fromName("int16_ref") === DataType.int16Ref)
    assert(DataType.fromName("int8_ref") === DataType.int8Ref)
    assert(DataType.fromName("string_ref") === DataType.stringRef)
    assert(DataType.fromName("complex64_ref") === DataType.complex64Ref)
    assert(DataType.fromName("int64_ref") === DataType.int64Ref)
    assert(DataType.fromName("boolean_ref") === DataType.booleanRef)
    assert(DataType.fromName("qint8_ref") === DataType.qint8Ref)
    assert(DataType.fromName("quint8_ref") === DataType.quint8Ref)
    assert(DataType.fromName("qint32_ref") === DataType.qint32Ref)
    assert(DataType.fromName("bfloat16_ref") === DataType.bfloat16Ref)
    assert(DataType.fromName("qint16_ref") === DataType.qint16Ref)
    assert(DataType.fromName("quint16_ref") === DataType.quint16Ref)
    assert(DataType.fromName("uint16_ref") === DataType.uint16Ref)
    assert(DataType.fromName("complex128_ref") === DataType.complex128Ref)
    assert(DataType.fromName("float16_ref") === DataType.float16Ref)
    assert(DataType.fromName("resource_ref") === DataType.resourceRef)
  }

  it must "throw an 'IllegalArgumentException' when invalid data type names are provided" in {
    assertThrows[IllegalArgumentException](DataType.fromName("foo"))
    assertThrows[IllegalArgumentException](DataType.fromName("bar"))
    assertThrows[IllegalArgumentException](DataType.fromName(""))
    assertThrows[IllegalArgumentException](DataType.fromName(null))
  }

  "'DataType.size'" must "give the correct result" in {
    assert(DataType.float16.byteSize === Some(2))
    assert(DataType.float32.byteSize === Some(4))
    assert(DataType.float64.byteSize === Some(8))
    assert(DataType.bfloat16.byteSize === None) // TODO: Why?
    assert(DataType.complex64.byteSize === Some(8))
    assert(DataType.complex128.byteSize === Some(16))
    assert(DataType.int8.byteSize === Some(1))
    assert(DataType.int16.byteSize === Some(2))
    assert(DataType.int32.byteSize === Some(4))
    assert(DataType.int64.byteSize === Some(8))
    assert(DataType.uint8.byteSize === Some(1))
    assert(DataType.uint16.byteSize === Some(2))
    assert(DataType.qint8.byteSize === Some(1))
    assert(DataType.qint16.byteSize === None) // TODO: Why?
    assert(DataType.qint32.byteSize === Some(4))
    assert(DataType.quint8.byteSize === Some(1))
    assert(DataType.quint16.byteSize === None) // TODO: Why?
    assert(DataType.boolean.byteSize === Some(1))
    assert(DataType.string.byteSize === None)
    assert(DataType.resource.byteSize === Some(1))
    assert(DataType.float16Ref.byteSize === Some(2))
    assert(DataType.float32Ref.byteSize === Some(4))
    assert(DataType.float64Ref.byteSize === Some(8))
    assert(DataType.bfloat16Ref.byteSize === None) // TODO: Why?
    assert(DataType.complex64Ref.byteSize === Some(8))
    assert(DataType.complex128Ref.byteSize === Some(16))
    assert(DataType.int8Ref.byteSize === Some(1))
    assert(DataType.int16Ref.byteSize === Some(2))
    assert(DataType.int32Ref.byteSize === Some(4))
    assert(DataType.int64Ref.byteSize === Some(8))
    assert(DataType.uint8Ref.byteSize === Some(1))
    assert(DataType.uint16Ref.byteSize === Some(2))
    assert(DataType.qint8Ref.byteSize === Some(1))
    assert(DataType.qint16Ref.byteSize === None) // TODO: Why?
    assert(DataType.qint32Ref.byteSize === Some(4))
    assert(DataType.quint8Ref.byteSize === Some(1))
    assert(DataType.quint16Ref.byteSize === None) // TODO: Why?
    assert(DataType.booleanRef.byteSize === Some(1))
    assert(DataType.stringRef.byteSize === None)
    assert(DataType.resourceRef.byteSize === None)
  }

  "'DataType.isBoolean'" must "always work correctly" in {
    assert(DataType.float16.isBoolean === false)
    assert(DataType.float32.isBoolean === false)
    assert(DataType.float64.isBoolean === false)
    assert(DataType.bfloat16.isBoolean === false)
    assert(DataType.complex64.isBoolean === false)
    assert(DataType.complex128.isBoolean === false)
    assert(DataType.int8.isBoolean === false)
    assert(DataType.int16.isBoolean === false)
    assert(DataType.int32.isBoolean === false)
    assert(DataType.int64.isBoolean === false)
    assert(DataType.uint8.isBoolean === false)
    assert(DataType.uint16.isBoolean === false)
    assert(DataType.qint8.isBoolean === false)
    assert(DataType.qint16.isBoolean === false)
    assert(DataType.qint32.isBoolean === false)
    assert(DataType.quint8.isBoolean === false)
    assert(DataType.quint16.isBoolean === false)
    assert(DataType.boolean.isBoolean === true)
    assert(DataType.string.isBoolean === false)
    assert(DataType.resource.isBoolean === false)
    assert(DataType.float16Ref.isBoolean === false)
    assert(DataType.float32Ref.isBoolean === false)
    assert(DataType.float64Ref.isBoolean === false)
    assert(DataType.bfloat16Ref.isBoolean === false)
    assert(DataType.complex64Ref.isBoolean === false)
    assert(DataType.complex128Ref.isBoolean === false)
    assert(DataType.int8Ref.isBoolean === false)
    assert(DataType.int16Ref.isBoolean === false)
    assert(DataType.int32Ref.isBoolean === false)
    assert(DataType.int64Ref.isBoolean === false)
    assert(DataType.uint8Ref.isBoolean === false)
    assert(DataType.uint16Ref.isBoolean === false)
    assert(DataType.qint8Ref.isBoolean === false)
    assert(DataType.qint16Ref.isBoolean === false)
    assert(DataType.qint32Ref.isBoolean === false)
    assert(DataType.quint8Ref.isBoolean === false)
    assert(DataType.quint16Ref.isBoolean === false)
    assert(DataType.booleanRef.isBoolean === true)
    assert(DataType.stringRef.isBoolean === false)
    assert(DataType.resourceRef.isBoolean === false)
  }

  "'DataType.isFloatingPoint'" must "always work correctly" in {
    assert(DataType.float16.isFloatingPoint === true)
    assert(DataType.float32.isFloatingPoint === true)
    assert(DataType.float64.isFloatingPoint === true)
    assert(DataType.bfloat16.isFloatingPoint === false)
    assert(DataType.complex64.isFloatingPoint === false)
    assert(DataType.complex128.isFloatingPoint === false)
    assert(DataType.int8.isFloatingPoint === false)
    assert(DataType.int16.isFloatingPoint === false)
    assert(DataType.int32.isFloatingPoint === false)
    assert(DataType.int64.isFloatingPoint === false)
    assert(DataType.uint8.isFloatingPoint === false)
    assert(DataType.uint16.isFloatingPoint === false)
    assert(DataType.qint8.isFloatingPoint === false)
    assert(DataType.qint16.isFloatingPoint === false)
    assert(DataType.qint32.isFloatingPoint === false)
    assert(DataType.quint8.isFloatingPoint === false)
    assert(DataType.quint16.isFloatingPoint === false)
    assert(DataType.boolean.isFloatingPoint === false)
    assert(DataType.string.isFloatingPoint === false)
    assert(DataType.resource.isFloatingPoint === false)
    assert(DataType.float16Ref.isFloatingPoint === true)
    assert(DataType.float32Ref.isFloatingPoint === true)
    assert(DataType.float64Ref.isFloatingPoint === true)
    assert(DataType.bfloat16Ref.isFloatingPoint === false)
    assert(DataType.complex64Ref.isFloatingPoint === false)
    assert(DataType.complex128Ref.isFloatingPoint === false)
    assert(DataType.int8Ref.isFloatingPoint === false)
    assert(DataType.int16Ref.isFloatingPoint === false)
    assert(DataType.int32Ref.isFloatingPoint === false)
    assert(DataType.int64Ref.isFloatingPoint === false)
    assert(DataType.uint8Ref.isFloatingPoint === false)
    assert(DataType.uint16Ref.isFloatingPoint === false)
    assert(DataType.qint8Ref.isFloatingPoint === false)
    assert(DataType.qint16Ref.isFloatingPoint === false)
    assert(DataType.qint32Ref.isFloatingPoint === false)
    assert(DataType.quint8Ref.isFloatingPoint === false)
    assert(DataType.quint16Ref.isFloatingPoint === false)
    assert(DataType.booleanRef.isFloatingPoint === false)
    assert(DataType.stringRef.isFloatingPoint === false)
    assert(DataType.resourceRef.isFloatingPoint === false)
  }

  "'DataType.isInteger'" must "always work correctly" in {
    assert(DataType.float16.isInteger === false)
    assert(DataType.float32.isInteger === false)
    assert(DataType.float64.isInteger === false)
    assert(DataType.bfloat16.isInteger === false)
    assert(DataType.complex64.isInteger === false)
    assert(DataType.complex128.isInteger === false)
    assert(DataType.int8.isInteger === true)
    assert(DataType.int16.isInteger === true)
    assert(DataType.int32.isInteger === true)
    assert(DataType.int64.isInteger === true)
    assert(DataType.uint8.isInteger === true)
    assert(DataType.uint16.isInteger === true)
    assert(DataType.qint8.isInteger === false)
    assert(DataType.qint16.isInteger === false)
    assert(DataType.qint32.isInteger === false)
    assert(DataType.quint8.isInteger === false)
    assert(DataType.quint16.isInteger === false)
    assert(DataType.boolean.isInteger === false)
    assert(DataType.string.isInteger === false)
    assert(DataType.resource.isInteger === false)
    assert(DataType.float16Ref.isInteger === false)
    assert(DataType.float32Ref.isInteger === false)
    assert(DataType.float64Ref.isInteger === false)
    assert(DataType.bfloat16Ref.isInteger === false)
    assert(DataType.complex64Ref.isInteger === false)
    assert(DataType.complex128Ref.isInteger === false)
    assert(DataType.int8Ref.isInteger === true)
    assert(DataType.int16Ref.isInteger === true)
    assert(DataType.int32Ref.isInteger === true)
    assert(DataType.int64Ref.isInteger === true)
    assert(DataType.uint8Ref.isInteger === true)
    assert(DataType.uint16Ref.isInteger === true)
    assert(DataType.qint8Ref.isInteger === false)
    assert(DataType.qint16Ref.isInteger === false)
    assert(DataType.qint32Ref.isInteger === false)
    assert(DataType.quint8Ref.isInteger === false)
    assert(DataType.quint16Ref.isInteger === false)
    assert(DataType.booleanRef.isInteger === false)
    assert(DataType.stringRef.isInteger === false)
    assert(DataType.resourceRef.isInteger === false)
  }

  "'DataType.isComplex'" must "always work correctly" in {
    assert(DataType.float16.isComplex === false)
    assert(DataType.float32.isComplex === false)
    assert(DataType.float64.isComplex === false)
    assert(DataType.bfloat16.isComplex === false)
    assert(DataType.complex64.isComplex === true)
    assert(DataType.complex128.isComplex === true)
    assert(DataType.int8.isComplex === false)
    assert(DataType.int16.isComplex === false)
    assert(DataType.int32.isComplex === false)
    assert(DataType.int64.isComplex === false)
    assert(DataType.uint8.isComplex === false)
    assert(DataType.uint16.isComplex === false)
    assert(DataType.qint8.isComplex === false)
    assert(DataType.qint16.isComplex === false)
    assert(DataType.qint32.isComplex === false)
    assert(DataType.quint8.isComplex === false)
    assert(DataType.quint16.isComplex === false)
    assert(DataType.boolean.isComplex === false)
    assert(DataType.string.isComplex === false)
    assert(DataType.resource.isComplex === false)
    assert(DataType.float16Ref.isComplex === false)
    assert(DataType.float32Ref.isComplex === false)
    assert(DataType.float64Ref.isComplex === false)
    assert(DataType.bfloat16Ref.isComplex === false)
    assert(DataType.complex64Ref.isComplex === true)
    assert(DataType.complex128Ref.isComplex === true)
    assert(DataType.int8Ref.isComplex === false)
    assert(DataType.int16Ref.isComplex === false)
    assert(DataType.int32Ref.isComplex === false)
    assert(DataType.int64Ref.isComplex === false)
    assert(DataType.uint8Ref.isComplex === false)
    assert(DataType.uint16Ref.isComplex === false)
    assert(DataType.qint8Ref.isComplex === false)
    assert(DataType.qint16Ref.isComplex === false)
    assert(DataType.qint32Ref.isComplex === false)
    assert(DataType.quint8Ref.isComplex === false)
    assert(DataType.quint16Ref.isComplex === false)
    assert(DataType.booleanRef.isComplex === false)
    assert(DataType.stringRef.isComplex === false)
    assert(DataType.resourceRef.isComplex === false)
  }

  "'DataType.isQuantized'" must "always work correctly" in {
    assert(DataType.float16.isQuantized === false)
    assert(DataType.float32.isQuantized === false)
    assert(DataType.float64.isQuantized === false)
    assert(DataType.bfloat16.isQuantized === true)
    assert(DataType.complex64.isQuantized === false)
    assert(DataType.complex128.isQuantized === false)
    assert(DataType.int8.isQuantized === false)
    assert(DataType.int16.isQuantized === false)
    assert(DataType.int32.isQuantized === false)
    assert(DataType.int64.isQuantized === false)
    assert(DataType.uint8.isQuantized === false)
    assert(DataType.uint16.isQuantized === false)
    assert(DataType.qint8.isQuantized === true)
    assert(DataType.qint16.isQuantized === true)
    assert(DataType.qint32.isQuantized === true)
    assert(DataType.quint8.isQuantized === true)
    assert(DataType.quint16.isQuantized === true)
    assert(DataType.boolean.isQuantized === false)
    assert(DataType.string.isQuantized === false)
    assert(DataType.resource.isQuantized === false)
    assert(DataType.float16Ref.isQuantized === false)
    assert(DataType.float32Ref.isQuantized === false)
    assert(DataType.float64Ref.isQuantized === false)
    assert(DataType.bfloat16Ref.isQuantized === true)
    assert(DataType.complex64Ref.isQuantized === false)
    assert(DataType.complex128Ref.isQuantized === false)
    assert(DataType.int8Ref.isQuantized === false)
    assert(DataType.int16Ref.isQuantized === false)
    assert(DataType.int32Ref.isQuantized === false)
    assert(DataType.int64Ref.isQuantized === false)
    assert(DataType.uint8Ref.isQuantized === false)
    assert(DataType.uint16Ref.isQuantized === false)
    assert(DataType.qint8Ref.isQuantized === true)
    assert(DataType.qint16Ref.isQuantized === true)
    assert(DataType.qint32Ref.isQuantized === true)
    assert(DataType.quint8Ref.isQuantized === true)
    assert(DataType.quint16Ref.isQuantized === true)
    assert(DataType.booleanRef.isQuantized === false)
    assert(DataType.stringRef.isQuantized === false)
    assert(DataType.resourceRef.isQuantized === false)
  }

  "'DataType.isUnsigned'" must "always work correctly" in {
    assert(DataType.float16.isUnsigned === false)
    assert(DataType.float32.isUnsigned === false)
    assert(DataType.float64.isUnsigned === false)
    assert(DataType.bfloat16.isUnsigned === false)
    assert(DataType.complex64.isUnsigned === false)
    assert(DataType.complex128.isUnsigned === false)
    assert(DataType.int8.isUnsigned === false)
    assert(DataType.int16.isUnsigned === false)
    assert(DataType.int32.isUnsigned === false)
    assert(DataType.int64.isUnsigned === false)
    assert(DataType.uint8.isUnsigned === true)
    assert(DataType.uint16.isUnsigned === true)
    assert(DataType.qint8.isUnsigned === false)
    assert(DataType.qint16.isUnsigned === false)
    assert(DataType.qint32.isUnsigned === false)
    assert(DataType.quint8.isUnsigned === false)
    assert(DataType.quint16.isUnsigned === false)
    assert(DataType.boolean.isUnsigned === false)
    assert(DataType.string.isUnsigned === false)
    assert(DataType.resource.isUnsigned === false)
    assert(DataType.float16Ref.isUnsigned === false)
    assert(DataType.float32Ref.isUnsigned === false)
    assert(DataType.float64Ref.isUnsigned === false)
    assert(DataType.bfloat16Ref.isUnsigned === false)
    assert(DataType.complex64Ref.isUnsigned === false)
    assert(DataType.complex128Ref.isUnsigned === false)
    assert(DataType.int8Ref.isUnsigned === false)
    assert(DataType.int16Ref.isUnsigned === false)
    assert(DataType.int32Ref.isUnsigned === false)
    assert(DataType.int64Ref.isUnsigned === false)
    assert(DataType.uint8Ref.isUnsigned === true)
    assert(DataType.uint16Ref.isUnsigned === true)
    assert(DataType.qint8Ref.isUnsigned === false)
    assert(DataType.qint16Ref.isUnsigned === false)
    assert(DataType.qint32Ref.isUnsigned === false)
    assert(DataType.quint8Ref.isUnsigned === false)
    assert(DataType.quint16Ref.isUnsigned === false)
    assert(DataType.booleanRef.isUnsigned === false)
    assert(DataType.stringRef.isUnsigned === false)
    assert(DataType.resourceRef.isUnsigned === false)
  }

  "'DataType.isRef'" must "always work correctly" in {
    assert(DataType.float16.isRef === false)
    assert(DataType.float32.isRef === false)
    assert(DataType.float64.isRef === false)
    assert(DataType.bfloat16.isRef === false)
    assert(DataType.complex64.isRef === false)
    assert(DataType.complex128.isRef === false)
    assert(DataType.int8.isRef === false)
    assert(DataType.int16.isRef === false)
    assert(DataType.int32.isRef === false)
    assert(DataType.int64.isRef === false)
    assert(DataType.uint8.isRef === false)
    assert(DataType.uint16.isRef === false)
    assert(DataType.qint8.isRef === false)
    assert(DataType.qint16.isRef === false)
    assert(DataType.qint32.isRef === false)
    assert(DataType.quint8.isRef === false)
    assert(DataType.quint16.isRef === false)
    assert(DataType.boolean.isRef === false)
    assert(DataType.string.isRef === false)
    assert(DataType.resource.isRef === false)
    assert(DataType.float16Ref.isRef === true)
    assert(DataType.float32Ref.isRef === true)
    assert(DataType.float64Ref.isRef === true)
    assert(DataType.bfloat16Ref.isRef === true)
    assert(DataType.complex64Ref.isRef === true)
    assert(DataType.complex128Ref.isRef === true)
    assert(DataType.int8Ref.isRef === true)
    assert(DataType.int16Ref.isRef === true)
    assert(DataType.int32Ref.isRef === true)
    assert(DataType.int64Ref.isRef === true)
    assert(DataType.uint8Ref.isRef === true)
    assert(DataType.uint16Ref.isRef === true)
    assert(DataType.qint8Ref.isRef === true)
    assert(DataType.qint16Ref.isRef === true)
    assert(DataType.qint32Ref.isRef === true)
    assert(DataType.quint8Ref.isRef === true)
    assert(DataType.quint16Ref.isRef === true)
    assert(DataType.booleanRef.isRef === true)
    assert(DataType.stringRef.isRef === true)
    assert(DataType.resourceRef.isRef === true)
  }

  "'DataType.ref'" must "always work correctly" in {
    assert(DataType.float16.ref === DataType.float16Ref)
    assert(DataType.float32.ref === DataType.float32Ref)
    assert(DataType.float64.ref === DataType.float64Ref)
    assert(DataType.bfloat16.ref === DataType.bfloat16Ref)
    assert(DataType.complex64.ref === DataType.complex64Ref)
    assert(DataType.complex128.ref === DataType.complex128Ref)
    assert(DataType.int8.ref === DataType.int8Ref)
    assert(DataType.int16.ref === DataType.int16Ref)
    assert(DataType.int32.ref === DataType.int32Ref)
    assert(DataType.int64.ref === DataType.int64Ref)
    assert(DataType.uint8.ref === DataType.uint8Ref)
    assert(DataType.uint16.ref === DataType.uint16Ref)
    assert(DataType.qint8.ref === DataType.qint8Ref)
    assert(DataType.qint16.ref === DataType.qint16Ref)
    assert(DataType.qint32.ref === DataType.qint32Ref)
    assert(DataType.quint8.ref === DataType.quint8Ref)
    assert(DataType.quint16.ref === DataType.quint16Ref)
    assert(DataType.boolean.ref === DataType.booleanRef)
    assert(DataType.string.ref === DataType.stringRef)
    assert(DataType.resource.ref === DataType.resourceRef)
    assert(DataType.float16Ref.ref === DataType.float16Ref)
    assert(DataType.float32Ref.ref === DataType.float32Ref)
    assert(DataType.float64Ref.ref === DataType.float64Ref)
    assert(DataType.bfloat16Ref.ref === DataType.bfloat16Ref)
    assert(DataType.complex64Ref.ref === DataType.complex64Ref)
    assert(DataType.complex128Ref.ref === DataType.complex128Ref)
    assert(DataType.int8Ref.ref === DataType.int8Ref)
    assert(DataType.int16Ref.ref === DataType.int16Ref)
    assert(DataType.int32Ref.ref === DataType.int32Ref)
    assert(DataType.int64Ref.ref === DataType.int64Ref)
    assert(DataType.uint8Ref.ref === DataType.uint8Ref)
    assert(DataType.uint16Ref.ref === DataType.uint16Ref)
    assert(DataType.qint8Ref.ref === DataType.qint8Ref)
    assert(DataType.qint16Ref.ref === DataType.qint16Ref)
    assert(DataType.qint32Ref.ref === DataType.qint32Ref)
    assert(DataType.quint8Ref.ref === DataType.quint8Ref)
    assert(DataType.quint16Ref.ref === DataType.quint16Ref)
    assert(DataType.booleanRef.ref === DataType.booleanRef)
    assert(DataType.stringRef.ref === DataType.stringRef)
    assert(DataType.resourceRef.ref === DataType.resourceRef)
  }

  "'DataType.base'" must "always work correctly" in {
    assert(DataType.float16.base === DataType.float16)
    assert(DataType.float32.base === DataType.float32)
    assert(DataType.float64.base === DataType.float64)
    assert(DataType.bfloat16.base === DataType.bfloat16)
    assert(DataType.complex64.base === DataType.complex64)
    assert(DataType.complex128.base === DataType.complex128)
    assert(DataType.int8.base === DataType.int8)
    assert(DataType.int16.base === DataType.int16)
    assert(DataType.int32.base === DataType.int32)
    assert(DataType.int64.base === DataType.int64)
    assert(DataType.uint8.base === DataType.uint8)
    assert(DataType.uint16.base === DataType.uint16)
    assert(DataType.qint8.base === DataType.qint8)
    assert(DataType.qint16.base === DataType.qint16)
    assert(DataType.qint32.base === DataType.qint32)
    assert(DataType.quint8.base === DataType.quint8)
    assert(DataType.quint16.base === DataType.quint16)
    assert(DataType.boolean.base === DataType.boolean)
    assert(DataType.string.base === DataType.string)
    assert(DataType.resource.base === DataType.resource)
    assert(DataType.float16Ref.base === DataType.float16)
    assert(DataType.float32Ref.base === DataType.float32)
    assert(DataType.float64Ref.base === DataType.float64)
    assert(DataType.bfloat16Ref.base === DataType.bfloat16)
    assert(DataType.complex64Ref.base === DataType.complex64)
    assert(DataType.complex128Ref.base === DataType.complex128)
    assert(DataType.int8Ref.base === DataType.int8)
    assert(DataType.int16Ref.base === DataType.int16)
    assert(DataType.int32Ref.base === DataType.int32)
    assert(DataType.int64Ref.base === DataType.int64)
    assert(DataType.uint8Ref.base === DataType.uint8)
    assert(DataType.uint16Ref.base === DataType.uint16)
    assert(DataType.qint8Ref.base === DataType.qint8)
    assert(DataType.qint16Ref.base === DataType.qint16)
    assert(DataType.qint32Ref.base === DataType.qint32)
    assert(DataType.quint8Ref.base === DataType.quint8)
    assert(DataType.quint16Ref.base === DataType.quint16)
    assert(DataType.booleanRef.base === DataType.boolean)
    assert(DataType.stringRef.base === DataType.string)
    assert(DataType.resourceRef.base === DataType.resource)
  }

  "'DataType.real'" must "always work correctly" in {
    assert(DataType.float16.real === DataType.float16)
    assert(DataType.float32.real === DataType.float32)
    assert(DataType.float64.real === DataType.float64)
    assert(DataType.bfloat16.real === DataType.bfloat16)
    assert(DataType.complex64.real === DataType.float32)
    assert(DataType.complex128.real === DataType.float64)
    assert(DataType.int8.real === DataType.int8)
    assert(DataType.int16.real === DataType.int16)
    assert(DataType.int32.real === DataType.int32)
    assert(DataType.int64.real === DataType.int64)
    assert(DataType.uint8.real === DataType.uint8)
    assert(DataType.uint16.real === DataType.uint16)
    assert(DataType.qint8.real === DataType.qint8)
    assert(DataType.qint16.real === DataType.qint16)
    assert(DataType.qint32.real === DataType.qint32)
    assert(DataType.quint8.real === DataType.quint8)
    assert(DataType.quint16.real === DataType.quint16)
    assert(DataType.boolean.real === DataType.boolean)
    assert(DataType.string.real === DataType.string)
    assert(DataType.resource.real === DataType.resource)
    assert(DataType.float16Ref.real === DataType.float16Ref)
    assert(DataType.float32Ref.real === DataType.float32Ref)
    assert(DataType.float64Ref.real === DataType.float64Ref)
    assert(DataType.bfloat16Ref.real === DataType.bfloat16Ref)
    assert(DataType.complex64Ref.real === DataType.float32Ref)
    assert(DataType.complex128Ref.real === DataType.float64Ref)
    assert(DataType.int8Ref.real === DataType.int8Ref)
    assert(DataType.int16Ref.real === DataType.int16Ref)
    assert(DataType.int32Ref.real === DataType.int32Ref)
    assert(DataType.int64Ref.real === DataType.int64Ref)
    assert(DataType.uint8Ref.real === DataType.uint8Ref)
    assert(DataType.uint16Ref.real === DataType.uint16Ref)
    assert(DataType.qint8Ref.real === DataType.qint8Ref)
    assert(DataType.qint16Ref.real === DataType.qint16Ref)
    assert(DataType.qint32Ref.real === DataType.qint32Ref)
    assert(DataType.quint8Ref.real === DataType.quint8Ref)
    assert(DataType.quint16Ref.real === DataType.quint16Ref)
    assert(DataType.booleanRef.real === DataType.booleanRef)
    assert(DataType.stringRef.real === DataType.stringRef)
    assert(DataType.resourceRef.real === DataType.resourceRef)
  }

  "'DataType.isCompatibleWith'" must "always work correctly" in {
    assert(DataType.float16.isCompatibleWith(DataType.float16))
    assert(DataType.float16.isCompatibleWith(DataType.float16Ref))
    assert(!DataType.float16Ref.isCompatibleWith(DataType.float16))
    assert(DataType.float16Ref.isCompatibleWith(DataType.float16Ref))
    assert(!DataType.float16.isCompatibleWith(DataType.float32))
    assert(!DataType.float16.isCompatibleWith(DataType.float32Ref))
    assert(!DataType.float16Ref.isCompatibleWith(DataType.float32))
    assert(!DataType.float16Ref.isCompatibleWith(DataType.float32Ref))
  }
}
